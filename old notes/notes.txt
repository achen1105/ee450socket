/**
    // SEND AND RECEIVE MESSAGES OVER UDP SOCKETS
    // first receive message from serverA to get port info
    addr_len = sizeof their_addr;
	if ((numbytes = recvfrom(sockfd, buf, MAXDATASIZE-1 , 0,
		(struct sockaddr *)&their_addr, &addr_len)) == -1) {
		perror("recvfrom");
		exit(1);
	}
    printf("serverM UDP: received %d bytes to %s\n", numbytes, "127.0.0.1");
    */

    /**
    // send request message to server A
	if ((numbytes = sendto(sockfd, "serverM req info from serverA", strlen("serverM req info from serverA"), 0,
			 p->ai_addr, p->ai_addrlen)) == -1) 
    {
		perror("serverM UDP: sendto");
		exit(1);
	}
    printf("serverM UDP: sent %d bytes to %s\n", numbytes, "127.0.0.1");

    // response from server A
    if ((numbytes = recvfrom(sockfd, buf, MAXDATASIZE-1, 0,
			 p->ai_addr, &p->ai_addrlen)) == -1) 
    {
		perror("serverM UDP: sendto");
		exit(1);
	}
    printf("serverM UDP: received %d bytes to %s\n", numbytes, "127.0.0.1");
    // END SEND MESSAGE
    */



/**
    int main(int argc, char** argv)
    {
        
        
    }
    // 5.1
    struct sockaddr_storage their_addr;
    socklen_t addr_size;
    struct addrinfo hints, *res;
    int sockfd, new_fd;

    // first, load up address structs with getaddrinfo():
    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_UNSPEC;  // use IPv4 or IPv6, whichever
    hints.ai_socktype = SOCK_STREAM;
    // hints.ai_flags = AI_PASSIVE;     // fill in my IP for me

    
    //int getaddrinfo(const char *node,     // e.g. "www.example.com" or IP
    //               const char *service,  // e.g. "http" or port number
    //                const struct addrinfo *hints,
    //                struct addrinfo **res);
    
    getaddrinfo("127.0.0.1", "24421", &hints, &res);

    // make a socket:
    // int socket(int domain, int type, int protocol); 
    sockfd = socket(res->ai_family, res->ai_socktype, res->ai_protocol);

    // bind it to the port we passed in to getaddrinfo():
    // int bind(int sockfd, struct sockaddr *my_addr, int addrlen);
    bind(sockfd, res->ai_addr, res->ai_addrlen);

    // backlog - the number of connections allowed on the incoming queue
    //int listen(int sockfd, int backlog); 
    listen(sockfd, 5);

    cout << "The main server is up and running." << endl;

    // // now accept an incoming connection:
    // int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen); 
    addr_size = sizeof their_addr;
    new_fd = accept(sockfd, (struct sockaddr *)&their_addr, &addr_size);

    // ready to communicate on socket descriptor new_fd!
    */


    // UDP CLIENT PROGRAM
    #include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <iostream>
#include <errno.h>
#include <string.h>
#include <netdb.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <sys/wait.h>

// 6.2 A Simple Stream Client
/*
** talker.c -- a datagram "client" demo
*/

#define SERVERPORT "24421"    // the port users will be connecting to

int main(int argc, char *argv[])
{
    int sockfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;

    if (argc != 3) {
        fprintf(stderr,"usage: talker hostname message\n");
        exit(1);
    }

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET6; // set to AF_INET to use IPv4
    hints.ai_socktype = SOCK_DGRAM;

    if ((rv = getaddrinfo(argv[1], SERVERPORT, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and make a socket
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("talker: socket");
            continue;
        }

        break;
    }

    if (p == NULL) {
        fprintf(stderr, "talker: failed to create socket\n");
        return 2;
    }

    printf("The clientA is up and running.\n");

    if ((numbytes = sendto(sockfd, argv[2], strlen(argv[2]), 0,
             p->ai_addr, p->ai_addrlen)) == -1) {
        perror("talker: sendto");
        exit(1);
    }

    freeaddrinfo(servinfo);

    printf("talker: sent %d bytes to %s\n", numbytes, argv[1]);
    close(sockfd);

    return 0;
}


/**
int main(int argc, char** argv)
{
    // 5.1
    struct addrinfo hints, *res;
    int sockfd;

    // first, load up address structs with getaddrinfo():
    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_UNSPEC;  // use IPv4 or IPv6, whichever
    hints.ai_socktype = SOCK_STREAM;
    // hints.ai_flags = AI_PASSIVE;     // fill in my IP for me

    //int getaddrinfo(const char *node,     // e.g. "www.example.com" or IP
     //               const char *service,  // e.g. "http" or port number
       //             const struct addrinfo *hints,
         //           struct addrinfo **res);
    
    getaddrinfo("127.0.0.1", "24421", &hints, &res);

    // make a socket:
    // int socket(int domain, int type, int protocol); 
    sockfd = socket(res->ai_family, res->ai_socktype, res->ai_protocol);

    // connect!
    // int connect(int sockfd, struct sockaddr *serv_addr, int addrlen); 
    connect(sockfd, res->ai_addr, res->ai_addrlen);

    cout << "The client A is up and running." << endl;
}
*/

// OLD SERVERM THAT WORKS WITH EACH SOCKET IN ITS OWN FUNCTION
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <netdb.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>

#define MYNODE "127.0.0.1" // local host hardcoded
#define MYPORT "24421"    // the UDP port users will be connecting to
#define MAXBUFLEN 100 // max buffer length

#define PORT2 "25421"  // the TCP port users will be connecting to for client A
#define BACKLOG2 10 // how many pending connections queue will hold

#define PORT3 "26421"  // the TCP port users will be connecting to for client B
#define BACKLOG3 10 // how many pending connections queue will hold

// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

/*
** listener.c -- a datagram sockets "server" demo
*/
int firstUDP()
{
    int sockfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET6_ADDRSTRLEN];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET6; // set to AF_INET to use IPv4
    hints.ai_socktype = SOCK_DGRAM;
    //hints.ai_flags = AI_PASSIVE; // use my IP

    // check errors in address info
    if ((rv = getaddrinfo(MYNODE, MYPORT, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }
    
    // error in binding socket
    if (p == NULL) {
        fprintf(stderr, "listener: failed to bind socket\n");
        return 2;
    }

    freeaddrinfo(servinfo);

    // successful socket
    printf("The main server is up and running.\n");

    // check buffer length
    addr_len = sizeof their_addr;
    if ((numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
        (struct sockaddr *)&their_addr, &addr_len)) == -1) {
        perror("recvfrom");
        exit(1);
    }

    // 
    printf("listener: got packet from %s\n",
        inet_ntop(their_addr.ss_family,
            get_in_addr((struct sockaddr *)&their_addr),
            s, sizeof s));
    printf("listener: packet is %d bytes long\n", numbytes);
    buf[numbytes] = '\0';
    printf("listener: packet contains \"%s\"\n", buf);

    //close(sockfd);

    return 0;
}

// Adapted from 6.1 A Simple Stream Server
void sigchld_handler(int s)
{
    // waitpid() might overwrite errno, so we save and restore it:
    int saved_errno = errno;

    while(waitpid(-1, NULL, WNOHANG) > 0);

    errno = saved_errno;
}

int secondTCP()
{
    int sockfd, new_fd;  // listen on sock_fd, new connection on new_fd
    struct addrinfo hints, *servinfo, *p;
    struct sockaddr_storage their_addr; // connector's address information
    socklen_t sin_size;
    struct sigaction sa;
    int yes=1;
    char s[INET6_ADDRSTRLEN];
    int rv;

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_UNSPEC;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    if ((rv = getaddrinfo(MYNODE, PORT2, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("server: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
                sizeof(int)) == -1) {
            perror("setsockopt");
            exit(1);
        }

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("server: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

    if (p == NULL)  {
        fprintf(stderr, "server: failed to bind\n");
        exit(1);
    }

    if (listen(sockfd, BACKLOG2) == -1) {
        perror("listen");
        exit(1);
    }

    sa.sa_handler = sigchld_handler; // reap all dead processes
    sigemptyset(&sa.sa_mask);
    sa.sa_flags = SA_RESTART;
    if (sigaction(SIGCHLD, &sa, NULL) == -1) {
        perror("sigaction");
        exit(1);
    }

    printf("server: waiting for connections...\n");

    while(1) {  // main accept() loop
        sin_size = sizeof their_addr;
        new_fd = accept(sockfd, (struct sockaddr *)&their_addr, &sin_size);
        if (new_fd == -1) {
            perror("accept");
            continue;
        }

        inet_ntop(their_addr.ss_family,
            get_in_addr((struct sockaddr *)&their_addr),
            s, sizeof s);
        printf("server: got connection from %s\n", s);

        if (!fork()) { // this is the child process
            close(sockfd); // child doesn't need the listener
            if (send(new_fd, "Hello, world!", 13, 0) == -1)
                perror("send");
            close(new_fd);
            exit(0);
        }
        close(new_fd);  // parent doesn't need this
    }

    return 0;
}

int main(void)
{
    //firstUDP();
    secondTCP();
}

int checkWallet()
{

}

//  WORKING SECOND TCP
int secondTCP()
{
    int sockfdTCP1, new_fdTCP1;  // listen on sock_fd, new connection on new_fd
    struct addrinfo hintsTCP1, *servinfoTCP1, *pTCP1;
    struct sockaddr_storage their_addrTCP1; // connector's address information
    socklen_t sin_sizeTCP1;
    struct sigaction saTCP1;
    int yesTCP1=1;
    char sTCP1[INET6_ADDRSTRLEN];
    int rvTCP1;

    memset(&hintsTCP1, 0, sizeof hintsTCP1);
    hintsTCP1.ai_family = AF_UNSPEC;
    hintsTCP1.ai_socktype = SOCK_STREAM;
    hintsTCP1.ai_flags = AI_PASSIVE; // use my IP

    if ((rvTCP1 = getaddrinfo(MYNODE, PORT2, &hintsTCP1, &servinfoTCP1)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rvTCP1));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(pTCP1 = servinfoTCP1; pTCP1 != NULL; pTCP1 = pTCP1->ai_next) {
        if ((sockfdTCP1 = socket(pTCP1->ai_family, pTCP1->ai_socktype,
                pTCP1->ai_protocol)) == -1) {
            perror("server: socket");
            continue;
        }

        if (setsockopt(sockfdTCP1, SOL_SOCKET, SO_REUSEADDR, &yesTCP1,
                sizeof(int)) == -1) {
            perror("setsockopt");
            exit(1);
        }

        if (bind(sockfdTCP1, pTCP1->ai_addr, pTCP1->ai_addrlen) == -1) {
            close(sockfdTCP1);
            perror("server: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfoTCP1); // all done with this structure

    if (pTCP1 == NULL)  {
        fprintf(stderr, "server: failed to bind\n");
        exit(1);
    }

    if (listen(sockfdTCP1, BACKLOG2) == -1) {
        perror("listen");
        exit(1);
    }

    saTCP1.sa_handler = sigchld_handler; // reap all dead processes
    sigemptyset(&saTCP1.sa_mask);
    saTCP1.sa_flags = SA_RESTART;
    if (sigaction(SIGCHLD, &saTCP1, NULL) == -1) {
        perror("sigaction");
        exit(1);
    }

    printf("server: waiting for connections...\n");

    while(1) {  // main accept() loop
        sin_sizeTCP1 = sizeof their_addrTCP1;
        new_fdTCP1 = accept(sockfdTCP1, (struct sockaddr *)&their_addrTCP1, &sin_sizeTCP1);
        if (new_fdTCP1 == -1) {
            perror("accept");
            continue;
        }

        inet_ntop(their_addrTCP1.ss_family,
            get_in_addr((struct sockaddr *)&their_addrTCP1),
            sTCP1, sizeof sTCP1);
        printf("server: got connection from %s\n", sTCP1);

        if (!fork()) { // this is the child process
            close(sockfdTCP1); // child doesn't need the listener
            if (send(new_fdTCP1, "Hello, world!", 13, 0) == -1)
                perror("send");
            close(new_fdTCP1);
            exit(0);
        }
        close(new_fdTCP1);  // parent doesn't need this
    }

    return 0;
}